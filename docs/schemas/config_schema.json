{
  "$schema": "http://json-schema.org/schema#",
  "id": "Nova Renderer Config Schema",
  "title": "Nova Renderer Config Schema",
  "description": "The schema for the Nova Renderer's config file",
  "properties": {
    "settings": {
      "type": "object",
      "description": "The object with all user-modifiable settings",
      "properties": {
        "loaded_shaderpack": {
          "type": "string",
          "description": "The name of the currently loaded shaderpack"
        },
        "loadedResourcepacks": {
          "type": "array",
          "description": "All the loaded resourcepacks in load order. The first entry in this array is loaded first, the second entry loaded second, etc",
          "items": {
            "type": "string"
          }
        },
        "viewWidth": {
          "type": "integer",
          "description": "The width, in pixels, of the view area"
        },
        "viewHeight": {
          "type": "integer",
          "description": "The height, in pixels, of the view area"
        },
        "scaleFactor": {
          "type": "integer",
          "description": "The scale factor of the GUI (I think)"
        },
        "shaders": {
          "type": "object",
          "description": "The options set by a given shaderpsck. These options may be set through specific lines in a shader source file, or they may be set in a shaderpack's shaders.json file",
          "properties": {
            "shadowDepthBuffers": {
              "type": "integer",
              "description": "The number of enabled shadow depth buffers.\n\n* If only one is enabled, all geometry will render to the shadow depth buffer.\n*If two are enabled, transparent geometry will be rendered into the first shadow depth buffer and opaque geometry will be rendered into the second.\n\nThis value is set by using the shadow textures that you want to use. If you have a shader which uses `shadow` and `watershadow`, then this value will be automatically set to 2",
              "minimum": 0,
              "maximum": 2,
              "default": 0
            },
            "shadowColorBuffers": {
              "type": "integer",
              "description": "The number of enabled shadow color buffers. Shadow shaders can write arbitrary data to these, then access that data later on in a gbuffer, composite, or final shader. This value cannot be greater than the number of framebuffer attachments that your GPU supports (Don't worry, Nova will tell you if you try to use too many).\n\nThis value is enabled by using the shadow color texture that you want to use. If your shadow shader writes to color attachments 3, 4, and 5, then this value will be automatically set to 5",
              "minimum": 0,
              "maximum": 8,
              "default": 0
            },
            "depthBuffers": {
              "type": "integer",
              "description": "The number of enabled gbuffer depth buffers.\n\n* If one is enabled, the depth of all geometry will be written to the gbuffer depth buffer.\n* If two or more are enabled, things happen but I don't know them\n\nThis value is set by using the depth buffers that you want in your shader. If you use `depthtex2`, then this value will be automatically set to 3.",
              "minimum": 0,
              "maximum": 4,
              "default": 1
            },
            "colorBuffers": {
              "type": "integer",
              "description": "The number of enabled color buffers. gbuffer and composite shaders can write arbitary data to these, and composite shaders can access the data in these. This value cannot be greater than the number of framebuffer attachments that your GPU supports (Don't worry, Nova will tell you if you try to use too many).\n\nThis value is set by using the color textures that you want to use. If you hsave a shader which writes to `colortex3` and `colortex7`, then this value will be set to 8",
              "minimum": 0,
              "maximum": 8,
              "default": 4
            },
            "centerDepthSmooth": {
              "type": "boolean",
              "description": "If true, the centerDepthSmooth uniform will be the smoothed depth at the center of the screen. This is useful for effects such as depth-of-field.\n\nThis value is set by using the uniform boolean `centerDepthSmooth` in your shader",
              "default": false
            },
            "shadowMapResolution": {
              "type": "integer",
              "description": "The size in pixels of one side of the shadow map. Since the shadow map is always a square, all sides are the same size. This number can in theory be anything, but by convention it's a power of 2 (1024, 2048, 4096, etc).\n\nThe shadow map resolution can be set in a few ways:\n\n* Include a comment like /* SHADOWRES:1024 */, which will set the shadow map resolution to 1024. Values ofther than 1024 may be used\n* Declare a constant like `const int shadowMapResolution = 2048;`, which will set the shadow map resolution to 2048. Values other than 2048 may be used",
              "minimum": 1,
              "maximum": 32768,
              "default": 1024
            },
            "shadowMapFov": {
              "type": "number",
              "description": "The field of view that will be used for the shadow map.\n\nThe shadow map FOV can be set through the comment /* SHADOWFOV:90.0 */, which will set the shadow map FOV to 90. Values other than 90 may be used.",
              "minimum": 0,
              "maximum": 179,
              "default": 0
            },
            "shadowMapDistance": {
              "type": "number",
              "description": "The distance in world units from one end of the shadow map to the other. This value is independent of the shadow map resolution. You could have a low resolution and a high distance, resulting in large shadowmap texels, or you could have a high resolution and a low distance, which would give you much smaller shadow map texels.\n\nThe shadow map ditsnace can be set in two ways:\n* A coment like /* SHADOWHPL:120.0 */, which will set the shadow map distance to 120. Values other than 120 may be used. I don't know how the letters HPL are related to the shadow map resolution, but here we are.\n* Declare a constant like `const int shadowDistance = 160.0f;`, which will set the shadow map distance to 160. Values other than 160 may be used"
              "minimum": 10,
              "default": 120
            }
          }
        }
      }
    },
    "readOnly": {
      "type": "object",
      "description": "Read-only data that's possibly no longer needed"
    }
  }
}