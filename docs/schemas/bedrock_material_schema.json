{
    "definitions": {
        "state": {
            "type": "object",
            "properties": {
                "defines" : {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any symbols put here will be defined in the shader used for this state"
                },
                "samplerStates": {
                    "type": "array",
                    "items":{ 
                        "ref": "#/definitions/samplerState"
                    },
                    "description": "This array defines all the sampler states to be used for this state. The available data only defines texture filtering, but there may be more that's possible and just isn't available"
                },
                "states" : {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": ["Blending", "InvertCulling", "DisableCulling", "DisableDepthWrite", "DisableDepthWrite", "EnableStencilTest", "StencilWrite", "DisableColorWrite", "EnableAlphaToCoverage"]
                    },
                    "description": "The renderer states that need to be active when rendring this state"
                },
                "depthBias": {
                    "type": "number",
                    "description": "Offset the value written to the depth buffer"
                }, 
                "slopeScaledDepthBias": {
                    "type": "number"
                },
                "depthBiasOGL": {
                    "type": "number",
                    "description": "Offset the value written to the depth buffer. If this value is present then Nova ignores depthBias"
                }, 
                "slopeScaledDepthBiasOGL": {
                    "type": "number",
                    "description": "Offset the value written to the depth buffer. If this value is present then Nove ignores slopeScaledDepthBias"
                }, 
                "vertexShader" : {
                    "type": "string",
                    "description": "Provides the filepath for the vertex shader to use for this state"
                },
                "vrGeometryShader": {
                    "type": "string",
                    "description": "Provides the filepath for the VR geometry shader to use for this state. Nova ignores this value since it doesn't deal with VR"
                },
                "geometryShader": {
                    "type": "string",
                    "description": "Provides the filepath for the geometry shader to use for this state"
                },
                "tessellationControlShader": {
                    "type": "string",
                    "description": "Provides the filepath for the tessellation control shader to use for this state"
                },
                "tessellationEvaluationShader": {
                    "type": "string",
                    "description": "Provides the filepath for the tessellation evaluation shader to use for this state"
                },
                "fragmentShader": {
                    "type": "string",
                    "description": "Provides the filepath for the fragment shader to use for this pass"
                },
                "vertexFields": {
                    "type": "array",
                    "items":{
                        "ref": "#/definitions/vertexField"
                    },
                    "description": "Declares what vertex data this state's shaders use, and what order the vertex attributes should be passed in"
                },
                "frontFace": {
                    "type": "object",
                    "description": "Defines the stencil buffer attributes to use when rendering front faces",
                    "properties": {
                        "stencilFunc": {
                            "type": "string",
                            "enum": ["Always", "Never", "Less", "LessEqual", "GreaterEqual", "Equal", "Replace", "NotEqual"],
                            "description": "What stencil function to use for the front faces in this state"
                        },
                        "stencilFailOp": {
                            "type": "string",
                            "enum": ["Keep", "Zero", "Replace", "Increment", "IncrementAndWrap", "Decrement", "DecrementAndWrap", "Invert"],
                            "description": "What to do when the stencil test fails"
                        },
                        "stencilDepthFailOp": {
                            "type": "string",
                            "enum": ["Keep", "Zero", "Replace", "Increment", "IncrementAndWrap", "Decrement", "DecrementAndWrap", "Invert"],
                            "description": "What to do when the stencil and depth tests fail (I think)"
                        },
                        "StencilPassOp": {
                            "type": "string",
                            "enum": ["Keep", "Zero", "Replace", "Increment", "IncrementAndWrap", "Decrement", "DecrementAndWrap", "Invert"],
                            "description": "What to do when the stencil test passes"
                        }
                    }
                },
                "backFace": {
                    "type": "object",
                    "description": "Defines the stencil buffer attributes to use when rendering back faces",
                    "properties": {
                        "stencilFunc": {
                            "type": "string",
                            "enum": ["Always", "Never", "Less", "LessEqual", "GreaterEqual", "Equal", "NotEqual"],
                            "description": "What stencil function to use for the back faces in this state"
                        },
                        "stencilFailOp": {
                            "type": "string",
                            "enum": ["Keep", "Zero", "Replace", "Increment", "IncrementAndWrap", "Decrement", "DecrementAndWrap", "Invert"],
                            "description": "What to do when the stencil test fails"
                        },
                        "stencilDepthFailOp": {
                            "type": "string",
                            "enum": ["Keep", "Zero", "Replace", "Increment", "IncrementAndWrap", "Decrement", "DecrementAndWrap", "Invert"],
                            "description": "What to do when the stencil and depth tests fail (I think)"
                        },
                        "stencilPassOp": {
                            "type": "string",
                            "enum": ["Keep", "Zero", "Replace", "Increment", "IncrementAndWrap", "Decrement", "DecrementAndWrap", "Invert"],
                            "description": "What to do when the stencil test passes"
                        }
                    }
                },
                "stencilRef": {
                    "type": "number",
                    "description": "Which stencil buffer to use (I think)"
                },
                "stencilReadMask": {
                    "type": "number",
                    "description": "The mask to use when reading values from the stencil buffer"
                },
                "stencilMaskWrite": {
                    "type": "number",
                    "description": "The mask to use when writing values to the stencil buffer"
                },
                "msaaSupport": {
                    "type": "string",
                    "enum": ["MSAA", "Both"],
                    "description": "Tells Bedrock how to handle MSAA for this rendering object"
                },
                "primitiveMode": {
                    "type": "string",
                    "enum": ["Line", "Triangle"],
                    "description": "Tells Bedrock what type of geometry should be rendered in this state. Triangle is the default value"
                },
                "blendSrc": {
                    "type": "string",
                    "enum": ["SourceColor", "Zero", "One", "SourceAlpha", "OneMinusSourceAlpha", "DestColor", "OneMinusDstColor"],
                    "description": "How to interpret the source data when performing blending"
                },
                "blendDst": {
                    "type": "string",
                    "enum": ["SourceColor", "Zero", "One", "SourceAlpha", "OneMinusSourceAlpha", "DestColor", "OneMinusDestColor"],
                    "description": "How to interpret the destination data when blending"
                },
                "textures": {
                    "type": "array",
                    "items": {
                        "ref": "#/definitions/texture"
                    },
                    "description": "What textures this state needs enabled"
                },
                "alphaSrc": {
                    "type": "string",
                    "enum": ["One", "Zero", "DestColor"],
                    "description": "How the source alpha should be interpreted"
                },
                "alphaDst": {
                    "type": "string",
                    "enum": ["Zero", "One", "DestColor"],
                    "description": "Hoe the destination alpha should be interpreted"
                },
                "depthFunc": {
                    "type": "string",
                    "enum": ["Equal", "Always", "LessEqual"],
                    "description": "The depth function to use for this state"
                }
            }
        },
        "samplerState": {
            "type": "object",
            "properties":{
                "samplerIndex": {
                    "type": "number",
                    "description": "The index of the sampler you want to set the state for"
                },
                "textureFilter": {
                    "type": "string",
                    "enum": ["TexelAA", "Bilinear", "Point" ],
                    "description": "The type of texture filter to use for this sampler"
                },
                "textureWrap": {
                    "type": "string",
                    "enum": ["Repeat", "Clamp"],
                    "description": "What to do when the UV coordinates are greater than 1 or less than 0"
                }
            }
        },
        "vertexField": {
            "type": "object",
            "properties":{
                "field": {
                    "type": "string",
                    "enum": ["Position", "UV0", "UV1", "Color", "Normal", "Tangent", "MidTexCoord", "VirtualTextureId", "McEntityId", "Empty"],
                    "description": "Declares which vertex field this object refers to. Here's how it goes down:\n\n* Position (float3): Vertex position\t* UV0 (half2): Primary UV coordinate, used for the color, normal, and data texture\n* UV1 (fixed2): Secondary UV, used for the lightmap\n* Color (fixed4): Vertex color, used for biome color\n* Normal (float3): Vertex normal\n* MainUV (half2): Nova-specific name for UV0\n* LightmapUv (fixed2): Nova-specific name for UV1\n* Tangent (float3): Vertex tangent. Hopefully not Nova only\n* MidTexCoord (half2): The texture coordinate of the main texture at the center of the quad. Nova-only\n* VirtualTextureId (uint32): A unique ID that represents this face's texture. Generated at runtime by Nova, this value helps Nova know what textures to make resident in the GPU\n* McEntityId (float4): A collection of data about the current block. Nova only\n* Empty: Specified that the vertex binding of this index should not be bound. Useful maybe, but definitely Nova-only"
                }
            }
        },
        "texture": {
            "type": "object",
            "properties": {
                "textureIndex": {
                    "type": "number",
                    "description": "The index of this texture. Textures in shaders have a name in the format of `TEXTURE_#`, where # is the index of the texture. Thus, the texture with an index of 0 would be calles `TEXTURE_0` in a shader, a texture with an index of 5 would be called `TEXTURE_5` in a shader, etc."
                },
                "textureLocation": {
                    "type": "string",
                    "enum": ["InUserPackage", "Dynamic"],
                    "description": "Where this texture should come from. `InUserPackage` means it comes from a resourcepack, `Dynamic` means it's generated by Minecraft at runtime"
                },
                "textureName": {
                    "type": "string",
                    "description": "The name of the texture to use. This value can be a specific texture in a resourcepack (something like `textures/misc/enchanted_item_glint`), or it can refer to an atlas (like `atlas.terrain`). A couple atlases:\n\n * `atlas.terrain`: The atlas of all the block textures\n * `atlas.items`: The atlas of all the item textures\n\nSome dynamic textures:\n\n * Brightness\n * SeasonFoliage"
                }
            }
        }
    }
}