/**
 * Defines a number of tasks used in setting up Nova
 *
 * This file will handle downloading MCP, patching the MCP code, generating the
 * patch file, and ensuring that the user has all the dependencies that they need.
 */

import com.bloidonia.groovy.extensions.FileExtensionMethods
import org.gradle.internal.os.OperatingSystem

import java.nio.file.FileSystems
import java.nio.file.Files

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.bloidonia', name: 'groovy-common-extensions', version: '0.7.0'
    }
}

//apply plugin: 'groovy-common-extensions'

task help {
    doLast {
    logger.info('''\
Allows you to set up Nova on a new machine. This script also checks that you have all the things that Nova needs, that they're on your PATH, and all the other fun stuff.

Available tasks:

 * setup                - Downloads MCP, unzips it, moves it to the right place, and applies the source code transformations to Minecraft so that Nova will be run properly. Before any of that, though, this tasks checks that you have all the right programs installed to your PATH

 * makePatch            - makes the source code patch that Nova uses to distribute its changes to the MC source code

 * verifyEnvironment    - Checks that you have all the right tools on your PATH
''')
    }
}

task verifyEnvironment << {
    checkCMake()

    def gccAvailable = hasGCC()
    def msvcAvailable = hasMSVC()

    if(!msvcAvailable) {
        logger.warn("Could not find MSVC. If you want to use MSVC to compile Nova, please use the Visual Studio Developer Command Prompt (just Google it)")
    } else {
        logger.info('Visual Studio found!')
    }

    if(!gccAvailable) {
        logger.warn('Could not find GCC. If you want to use GCC to compile Nova, please install it to your PATH and try again')
    } else {
        logger.info('GCC found!')
    }

    if(!gccAvailable && !msvcAvailable) {
        logger.fatal('Neither Visual Studio nor GCC are available. Please install one of these and add its location to your PATH')
        throw new GradleScriptException()
    }

    logger.info('All build tools detected')
}

task downloadMcp(dependsOn: verifyEnvironment) {
    outputs.upToDateWhen {
        def file = new File('src/main/java/net/Start.java')
        return file.exists()
    }
    doLast {
        download {
            src 'http://www.modcoderpack.com/files/mcp931.zip'
            dest 'mcp/mcp931.zip'
        }

        logger.info('Unzipping MCP...')
        Collection<File> extractedFiles = FileExtensionMethods.unzip(new File('./mcp/mcp931.zip'))
        logger.info('Unzipping complete')
    }
}

task decompileMcp(dependsOn: downloadMcp) {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                if (OperatingSystem.current().isWindows()) {
                    if(System.properties.contains("MCP_LOC")) {
                        println 'Using MCP location ' + System.getProperty('MCP_LOC')
                        commandLine "${project.projectDir}/mcp/runtime/bin/python/python_mcp", "${project.projectDir}/mcp/runtime/decompile.py", "--client", '-m', System.properties.getProperty("MCP_LOC")
                    } else {
                        commandLine "${project.projectDir}/mcp/runtime/bin/python/python_mcp", "${project.projectDir}/mcp/runtime/decompile.py", "--client"
                    }
                    workingDir './mcp'
                } else {
                    if(System.properties.contains("MCP_LOC")) {
                        commandLine 'python2', "${project.projectDir}/mcp/runtime/decompile.py", '-m', System.properties.getProperty("MCP_LOC")
                    } else {
                        commandLine 'python2', "${project.projectDir}/mcp/runtime/decompile.py"
                    }
                    workingDir 'mcp'
                }

                standardOutput = os
            }
            def outputAsString = os.toString()
            println "${outputAsString}"
        }
    }
}
task copyMcCodeMC(type: Copy, dependsOn: decompileMcp) {
    from 'mcp/src/minecraft/net'
    into 'src/main/java/net'
}
task copyMcCodeMCP(type: Copy, dependsOn: copyMcCodeMC) {
    from 'mcp/src/minecraft/mcp'
    into 'src/main/java/mcp'
}


task copyMcCodeJars(dependsOn: copyMcCodeMCP) {
    
       
        copy {
            from 'mcp/jars/assets'
            into 'jars/assets'
        }
        copy {
            from 'mcp/jars/libraries'
            into 'jars/libraries'
        }
        copy {
            from 'mcp/jars/saves'
            into 'jars/saves'
        }
        copy {
            from 'mcp/jars/versions'
            into 'jars/versions'
        }
        copy {
            from 'mcp/jars/server.properties'
            into 'jars/'
        }
        copy {
            from 'mcp/jars/servers.dat'
            into 'jars/'
        }
    
}

task copyMcAssets(type: Copy, dependsOn: copyMcCodeJars) {
    from 'mcp/temp/src/minecraft/assets'
    into 'src/main/resources/assets'
}

task copyMcPack(type: Copy, dependsOn: copyMcAssets) {
    from 'mcp/temp/src/minecraft/pack.png'
    into 'src/main/resources/pack.png'
}

task applyPatch(dependsOn: copyMcPack) {
    onlyIf {
        !new File('mc_from_git').exists()
    }
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            try {
                def result = exec {
                    if (OperatingSystem.current().isWindows()) {
                        commandLine "git","apply","--reject","--unidiff-zero","-v","--whitespace=fix","--no-index","--directory","src/main/java/net", "${project.projectDir}/patches/nova.patch"
                        workingDir './'
                    } else {
                       commandLine "git","apply","--reject","--unidiff-zero","-v","--whitespace=fix","--no-index","--directory","src/main/java/net", "${project.projectDir}/patches/nova.patch"
                        workingDir './'
                    }

                    standardOutput = os
                    errorOutput = os
                }
            } catch (Exception e) {
                println "Warning: Patch Might Not of Worked"
                //throw new GradleScriptException(os.toString(), e)
            }
            def outputAsString = os.toString()
            println "${outputAsString}"
            println "${project.projectDir}/patches/nova.patch"
        }
    }
}

task cleanupMcp(dependsOn: applyPatch) << {
    def mcpDir = file('mcp')
    mcpDir.delete()
}

task initSubmodules(dependsOn: cleanupMcp) << {
    new ByteArrayOutputStream().withStream { os ->
        try {
            def result = exec {
                commandLine 'git', 'submodule', 'update', '--init', '--recursive'
                standardOutput = os
                errorOutput = os
            }
        } catch(Exception e) {
            throw new GradleScriptException(os.toString(), e)
        }
        def outputAsString = os.toString()
        println "${outputAsString}"
    }
}

task setup(dependsOn: initSubmodules) << {
    logger.info('Nova setup succesfully')
}

task makePatch() << {
    new ByteArrayOutputStream().withStream { os ->
        try {
            def result = exec {
                commandLine 'git', 'diff', '-U0', 'origin/minecraft-1.10-mcp'
                workingDir 'src/main/java/net'

                standardOutput = os
                errorOutput = os
            }
        } catch(Exception e) {
            throw new GradleScriptException(os.toString(), e)
        }
        def outputAsString = os.toString()
        println "${outputAsString}"

        new File("patches/nova.patch").withWriter { out -> out.println outputAsString }
    }
}

task addChangesToGit(dependsOn: makePatch) << {
    new ByteArrayOutputStream().withStream { os ->
        try {
            def result = exec {
                commandLine 'git', 'add', '-A', ':/'

                standardOutput = os
                errorOutput = os
            }
        } catch(Exception e) {
            throw new GradleScriptException(os.toString(), e)
        }
        def outputAsString = os.toString()
        println "${outputAsString}"
    }
}

task commitChangesToGit(dependsOn: addChangesToGit) << {
    def console = System.console()
    def commitMessage = console.readLine()

    new ByteArrayOutputStream().withStream { os ->
        try {
            def result = exec {
                commandLine 'git', 'commit', '-m', commitMessage

                standardOutput = os
                errorOutput = os
            }
        } catch(Exception e) {
            throw new GradleScriptException(os.toString(), e)
        }
        def outputAsString = os.toString()
        println "${outputAsString}"
    }
}

task push(dependsOn: commitChangesToGit) << {
    new ByteArrayOutputStream().withStream { os ->
        try {
            def result = exec {
                commandLine 'git', 'push'

                standardOutput = os
                errorOutput = os
            }
        } catch(Exception e) {
            throw new GradleScriptException(os.toString(), e)
        }
        def outputAsString = os.toString()
        println "$outputAsString"
    }
}

clean.doFirst {
    delete "src/minecraft/"
    delete "bin"
    delete "conf"
    delete "eclipse"
    delete "libs"
    delete "logs"
    delete "mappingviewer"
    delete "mcp"
    delete "reobf"
    delete "runtime"
    delete "temp"
    delete "cleanup.sh"
    delete "cleanup.bat"
    delete "decompile.sh"
    delete "decompile.bat"
    delete "getchangedsrc.sh"
    delete "getchangedsrc.bat"
    delete "mcp931.zip"
    delete "recompile.bat"
    delete "recompile.sh"
    delete "reformat.sh"
    delete "reformat.bat"
    delete "reobfuscate.sh"
    delete "reobfuscate.bat"
    delete "reobfuscate_srg.sh"
    delete "reobfuscate_srg.bat"
    delete "startclient.sh"
    delete "startclient.bat"
    delete "startserver.sh"
    delete "startserver.bat"
    delete "updateids.sh"
    delete "updateids.bat"
    delete "updatemcp.sh"
    delete "updatemcp.bat"
    delete "updatemd5.sh"
    delete "updatemd5.bat"
    delete "updatenames.sh"
    delete "updatenames.bat"

    println "Removed MCP files"
}

static void checkCMake() {
    try {
        def cmakeTest = "cmake --version".execute()
        if(cmakeTest.waitFor() != 0) {
            println 'CMake not found. Please install CMake and add its location to your PATH'
            throw new GradleScriptException()
        } else {
            println 'CMake found!'
        }
    } catch(Exception e) {
        println 'CMake not found. Please install CMake and add its location to your PATH'
        throw new GradleScriptException(e)
    }
}

ext.hasGCC = {
    try {
        def sout = new StringBuilder(), serr = new StringBuilder()
        def gccTest = "gcc --version".execute()
        gccTest.consumeProcessOutput(sout, serr)
        return gccTest.waitFor() == 0
    } catch(Exception e) {
        return false
    }
}

ext.hasMSVC = {
    try {
        def sout = new StringBuilder(), serr = new StringBuilder()
        def msvcTest = "msbuild.exe /help".execute()
        msvcTest.consumeProcessOutput(sout, serr)
        return msvcTest.waitFor() == 0
    } catch(Exception e) {
        return false
    }
}
