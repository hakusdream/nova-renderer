/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ddubois' at '8/11/16 7:57 PM' with Gradle 2.14.1
 *
 * This gradle file is to build the Java part of Nova. It currently also builds all of Minecraft, which is super useful
 * for testing. Whenever we get an installer together, we should write a task to build just the mod, and a task to
 * build the installer
 */

plugins {
    id "de.undercouch.download" version "3.2.0"
    id 'java'
}

import org.apache.tools.ant.taskdefs.condition.Os
apply from: 'setup.gradle'

ext {
    Download = de.undercouch.gradle.tasks.download.Download
    download = download
}

// Set Nova's settings
sourceCompatibility = 1.8
version = '0.4.3'
jar {
    manifest {
        attributes 'Implementation-Title': 'Nova Renderer',
                   'Implementation-Version': version,
                   'Main-Class': 'Start'
    }	
}

task invokeCMake(type: Exec) {
    if(hasMSVC()) {
        if(System.properties['sun.arch.data.model'].toString().contains("64")) {
            println 'Configuring for MSVC 64-bit'
            commandLine 'cmake', '-G', 'Visual Studio 15 2017 Win64','-DCMAKE_BUILD_TYPE=RELEASE'
        } else {
            println 'Configuring for MSVC 32-bit'
            commandLine 'cmake', '-G', 'Visual Studio 15','-DCMAKE_BUILD_TYPE=RELEASE'
        }
    } else if(hasGCC()) {
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            println 'Configuring for MinGW'
            commandLine 'cmake', '-G', 'MinGW Makefiles','-DCMAKE_BUILD_TYPE=RELEASE'
        } else {
            println 'Configuring for GCC'
            commandLine 'cmake', '-G', 'Unix Makefiles','-DCMAKE_BUILD_TYPE=RELEASE'
        }
    } else {
        println 'No suitable compiler found'
    }
    workingDir 'src/main/cpp'
}

task buildDll(type: Exec, dependsOn: invokeCMake) {
    if(hasMSVC()) {
        commandLine 'msbuild', 'nova-renderer.vcxproj', '/t:Build', '/m', '/p:Configuration=Debug'
    } else if(hasGCC()) {
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'mingw32-make', '-f', 'Makefile', 'nova-renderer'
        } else {
            commandLine 'make', '-f', 'Makefile', 'nova-renderer'
        }
    } else {
        println 'No suitable compiler found'
    }
    workingDir 'src/main/cpp'
}

task printProps << {
    println System.properties['os.arch']
    println System.properties['sun.arch.data.model']

}

task runNova(type: JavaExec, dependsOn: ['buildDll', 'build']) {
    dependsOn buildDll
    classpath = sourceSets.main.runtimeClasspath
    main = 'Start'
    jvmArgs = ["-Djava.library.path=versions/1.10/1.10-natives"]
    workingDir = "jars"
}

task reRunNova(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'Start'
    jvmArgs = ["-Djava.library.path=versions/1.10/1.10-natives"]
    workingDir = "jars"
}

// Set the source directory
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
		resources {
            srcDirs = ['src/main/resources']
        }
    }
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // JNA, for calling the C++ code
    // compile group: 'net.java.dev.jna', name: 'jna', version: '4.2.2'
    
    compile group: 'io.github.java-graphics', name: 'glm', version: '1.0.1'

    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        compile files(
            'jars/libraries/net/java/jinput/jinput-platform/2.0.5/jinput-platform-2.0.5-natives-linux.jar',
            'jars/libraries/org/lwjgl/lwjgl/lwjgl-platform/2.9.4-nightly-20150209/lwjgl-platform-2.9.4-nightly-20150209-natives-linux.jar'
        )
    } else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        compile files(
            'jars/libraries/net/java/jinput/jinput-platform/2.0.5/jinput-platform-2.0.5-natives-windows.jar',
            'jars/libraries/org/lwjgl/lwjgl/lwjgl-platform/2.9.4-nightly-20150209/lwjgl-platform-2.9.4-nightly-20150209-natives-windows.jar'
        )
    }

    // Add all the dependencies that Minecraft has
    compile files(
            'jars/libraries/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.jar',
            'jars/libraries/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar',
            'jars/libraries/com/google/guava/guava/17.0/guava-17.0.jar',
            'jars/libraries/com/ibm/icu/icu4j-core-mojang/51.2/icu4j-core-mojang-51.2.jar',
            'jars/libraries/com/mojang/authlib/1.5.22/authlib-1.5.22.jar',
            'jars/libraries/com/mojang/netty/1.6/netty-1.6.jar',
            'jars/libraries/com/mojang/realms/1.9.1/realms-1.9.1.jar',
            'jars/libraries/com/paulscode/codecjorbis/20101023/codecjorbis-20101023.jar',
            'jars/libraries/com/paulscode/codecwav/20101023/codecwav-20101023.jar',
            'jars/libraries/com/paulscode/libraryjavasound/20101123/libraryjavasound-20101123.jar',
            'jars/libraries/com/paulscode/librarylwjglopenal/20100824/librarylwjglopenal-20100824.jar',
            'jars/libraries/com/paulscode/soundsystem/20120107/soundsystem-20120107.jar',
            'jars/libraries/commons-codec/commons-codec/1.9/commons-codec-1.9.jar',
            'jars/libraries/commons-io/commons-io/2.4/commons-io-2.4.jar',
            'jars/libraries/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar',
            'jars/libraries/io/netty/netty-all/4.0.23.Final/netty-all-4.0.23.Final.jar',
            'jars/libraries/it/unimi/dsi/fastutil/7.0.12_mojang/fastutil-7.0.12_mojang.jar',
            'jars/libraries/net/java/dev/jna/jna/3.4.0/jna-3.4.0.jar',
            'jars/libraries/net/java/dev/jna/platform/3.4.0/platform-3.4.0.jar',
            'jars/libraries/net/java/jinput/jinput/2.0.5/jinput-2.0.5.jar',
            'jars/libraries/net/java/jutils/jutils/1.0.0/jutils-1.0.0.jar',
            'jars/libraries/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar',
            'jars/libraries/org/apache/commons/commons-compress/1.8.1/commons-compress-1.8.1.jar',
            'jars/libraries/org/apache/commons/commons-lang3/3.3.2/commons-lang3-3.3.2.jar',
            'jars/libraries/org/apache/httpcomponents/httpclient/4.3.3/httpclient-4.3.3.jar',
            'jars/libraries/org/apache/httpcomponents/httpcore/4.3.2/httpcore-4.3.2.jar',
            'jars/libraries/org/apache/logging/log4j/log4j-api/2.0-beta9/log4j-api-2.0-beta9.jar',
            'jars/libraries/org/apache/logging/log4j/log4j-core/2.0-beta9/log4j-core-2.0-beta9.jar',
            'jars/libraries/org/lwjgl/lwjgl/lwjgl/2.9.4-nightly-20150209/lwjgl-2.9.4-nightly-20150209.jar',
            'jars/libraries/org/lwjgl/lwjgl/lwjgl_util/2.9.4-nightly-20150209/lwjgl_util-2.9.4-nightly-20150209.jar',
            'jars/libraries/oshi-project/oshi-core/1.1/oshi-core-1.1.jar'
        )

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
